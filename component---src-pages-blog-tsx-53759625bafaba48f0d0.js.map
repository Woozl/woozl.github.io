{"version":3,"file":"component---src-pages-blog-tsx-53759625bafaba48f0d0.js","mappings":"6JAiEA,IArDY,SAAC,GAAmD,IAAjDA,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,QAC9BC,GAAaC,EAAAA,EAAAA,eAAbD,SAGR,GAFiBE,EAAAA,EAAAA,gBAAeC,GAAxBC,KAOCC,aAJLC,EADJ,EACIA,aACAC,EAFJ,EAEIA,mBACAC,EAHJ,EAGIA,aACAC,EAJJ,EAIIA,QAGEC,EAAM,CACRd,MAAOA,GAASU,EAChBT,YAAaA,GAAeU,EAC5BT,MAAM,GAAIW,GAAUX,GAASU,GAC7BG,IAAI,GAAIF,EAAUT,GAGtB,OACIY,EAAAA,cAACC,EAAAA,EAAD,CAAQC,eAAgB,CAACC,KAAK,OAC1BH,EAAAA,cAAAA,OAAAA,CAAMI,KAAK,cAAcC,QAASP,EAAIb,cAEtCe,EAAAA,cAAAA,OAAAA,CAAMI,KAAK,QAAQC,QAASP,EAAIZ,QAE/BY,EAAIC,KAAOC,EAAAA,cAAAA,OAAAA,CAAMM,SAAS,SAASD,QAASP,EAAIC,OAE/CZ,EAAiB,KAASa,EAAAA,cAAAA,OAAAA,CAAMM,SAAS,UAAUD,QAAQ,YAE5DP,EAAId,OAASgB,EAAAA,cAAAA,OAAAA,CAAMM,SAAS,WAAWD,QAASP,EAAId,QAEpDc,EAAIb,aACDe,EAAAA,cAAAA,OAAAA,CAAMM,SAAS,iBAAiBD,QAASP,EAAIb,cAGhDa,EAAIZ,OAASc,EAAAA,cAAAA,OAAAA,CAAMM,SAAS,WAAWD,QAASP,EAAIZ,QAErDc,EAAAA,cAAAA,OAAAA,CAAMI,KAAK,eAAeC,QAAQ,wBAMjCP,EAAId,OAASgB,EAAAA,cAAAA,OAAAA,CAAMI,KAAK,gBAAgBC,QAASP,EAAId,QAErDc,EAAIb,aACDe,EAAAA,cAAAA,OAAAA,CAAMI,KAAK,sBAAsBC,QAASP,EAAIb,cAGjDa,EAAIZ,OAASc,EAAAA,cAAAA,OAAAA,CAAMI,KAAK,gBAAgBC,QAASP,EAAIZ,UAOlE,IAAMK,EAAK,a,8GCFX,EAvCa,SAAC,GAA8B,IAA5BgB,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,KACxB,OACER,EAAAA,cAACS,EAAAA,EAAD,CAAQF,SAAUA,EAAUG,UAAU,QAClCV,EAAAA,cAACW,EAAAA,EAAD,CAAK3B,MAAM,OAAOG,SAAS,IAEzBqB,EAAKI,OAAOC,MAAMC,KAAI,SAACC,GAAD,OACpBf,EAAAA,cAAAA,UAAAA,CAASgB,UC/BK,mCD+BoBC,IAAKF,EAAKG,IAC1ClB,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,KAAAA,KAAIA,EAAAA,cAACmB,EAAAA,KAAD,CAAMC,GAAE,IAAML,EAAKM,MAASN,EAAKO,YAAYtC,MAAQ,OACzDgB,EAAAA,cAAAA,IAAAA,KAAIe,EAAKQ,WAAa,KAAQR,EAAKQ,WAAW,EAAG,UAAU,UAA3D,MAAyER,EAAKO,YAAYE,OAE9D,OAA7BT,EAAKO,YAAYG,SAAqBzB,EAAAA,cAAAA,IAAAA,KAAIe,EAAKO,YAAYG","sources":["webpack://david-glymph/./src/components/seo.tsx","webpack://david-glymph/./src/pages/blog.tsx","webpack://david-glymph/./src/pages/blog.module.sass"],"sourcesContent":["import * as React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useLocation } from '@reach/router';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\n\r\ninterface Props {\r\n    title: string;\r\n    description?: string;\r\n    image?: string;\r\n    article?: boolean;\r\n};\r\n\r\nconst SEO = ({ title, description, image, article }: Props) => {\r\n    const { pathname } = useLocation();\r\n    const { site } = useStaticQuery(query);\r\n\r\n    const {\r\n        defaultTitle,\r\n        defaultDescription,\r\n        defaultImage,\r\n        siteUrl\r\n    } = site.siteMetadata;\r\n\r\n    const seo = {\r\n        title: title || defaultTitle,\r\n        description: description || defaultDescription,\r\n        image: `${siteUrl}${image || defaultImage}`,\r\n        url: `${siteUrl}${pathname}`\r\n    };\r\n\r\n    return (\r\n        <Helmet htmlAttributes={{lang: `en`}}>\r\n            <meta name=\"description\" content={seo.description} />\r\n\r\n            <meta name=\"image\" content={seo.image} />\r\n\r\n            {seo.url && <meta property=\"og:url\" content={seo.url} />}\r\n\r\n            {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\r\n\r\n            {seo.title && <meta property=\"og:title\" content={seo.title} />}\r\n\r\n            {seo.description && (\r\n                <meta property=\"og:description\" content={seo.description} />\r\n            )}\r\n\r\n            {seo.image && <meta property=\"og:image\" content={seo.image} />}\r\n\r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n\r\n            {/* {twitterUsername && (\r\n                <meta name=\"twitter:creator\" content={twitterUsername} />\r\n            )} */}\r\n\r\n            {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\r\n\r\n            {seo.description && (\r\n                <meta name=\"twitter:description\" content={seo.description} />\r\n            )}\r\n\r\n            {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\r\n        </Helmet>\r\n    )\r\n}\r\n\r\nexport default SEO;\r\n\r\nconst query = graphql`\r\n    query {\r\n        site {\r\n            siteMetadata {\r\n                defaultTitle: title\r\n                defaultDescription: description\r\n                defaultImage: image\r\n                siteUrl\r\n            }\r\n        }\r\n    }\r\n`","import * as React from 'react';\r\nimport { graphql, Link } from 'gatsby';\r\nimport Layout from '../components/layout';\r\nimport {blogPostCard} from './blog.module.sass';\r\nimport SEO from '../components/seo';\r\n\r\ninterface Node {\r\n  frontmatter: {\r\n    title: string;\r\n    date: string;\r\n    summary: string;\r\n  }\r\n  timeToRead: number;\r\n  id: string;\r\n  slug: string;\r\n}\r\n\r\ninterface Props {\r\n  location: Location;\r\n  data: {\r\n    allMdx: {\r\n      nodes: [ Node ]\r\n    }\r\n  }\r\n}\r\n\r\nconst Blog = ({ location, data }: Props) => {\r\n  return (\r\n    <Layout location={location} pageTitle='Blog'>\r\n        <SEO title=\"Blog\" article={false} />\r\n        {\r\n          data.allMdx.nodes.map((node: Node) => (\r\n            <article className={blogPostCard} key={node.id}>\r\n              <div>\r\n                <h1><Link to={`/${node.slug}`}>{node.frontmatter.title + \" →\"}</Link></h1>\r\n                <p>{node.timeToRead + \" \" + ((node.timeToRead>1)?\"minutes\":\"minute\")} • {node.frontmatter.date}</p>\r\n              </div>  \r\n              {node.frontmatter.summary !== null && (<p>{node.frontmatter.summary}</p>)}\r\n            </article>\r\n          ))\r\n        }\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMdx(\r\n      sort: {fields: frontmatter___date, order: DESC}\r\n      filter: {fileAbsolutePath: {regex: \"/blog/\"}}\r\n      ) {\r\n      nodes {\r\n        frontmatter {\r\n          title\r\n          date(formatString: \"MMMM Do, YYYY\")\r\n          summary\r\n        }\r\n        id\r\n        timeToRead\r\n        slug\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Blog;","// extracted by mini-css-extract-plugin\nexport var blogPostCard = \"blog-module--blogPostCard--ePgnA\";"],"names":["title","description","image","article","pathname","useLocation","useStaticQuery","query","site","siteMetadata","defaultTitle","defaultDescription","defaultImage","siteUrl","seo","url","React","Helmet","htmlAttributes","lang","name","content","property","location","data","Layout","pageTitle","SEO","allMdx","nodes","map","node","className","key","id","Link","to","slug","frontmatter","timeToRead","date","summary"],"sourceRoot":""}